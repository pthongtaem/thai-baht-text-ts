{"version":3,"file":"thai-baht-text.js","sources":["../src/thai-baht-text.ts"],"sourcesContent":["const MAX_POSITION = 6;\nconst UNIT_POSITION = 0;\nconst TEN_POSITION = 1;\n\nconst PRIMARY_UNIT = 'บาท';\nconst SECONDARY_UNIT = 'สตางค์';\nconst WHOLE_NUMBER_TEXT = 'ถ้วน';\n\nconst NUMBER_TEXTS = 'ศูนย์,หนึ่ง,สอง,สาม,สี่,ห้า,หก,เจ็ด,แปด,เก้า,สิบ'.split(\n  ',',\n);\nconst UNIT_TEXTS = 'สิบ,ร้อย,พัน,หมื่น,แสน,ล้าน'.split(',');\n\nconst getIntegerDigits = (numberInput: string): string =>\n  parseInt(numberInput.split('.')[0], 10).toString();\n\nconst getFractionalDigits = (numberInput: string): string =>\n  parseInt(numberInput.split('.')[1], 10).toString();\n\nconst hasFractionalDigits = (numberInput: string): boolean =>\n  numberInput !== undefined && numberInput != '0';\n\nconst isZeroValue = (number: number): boolean => number == 0;\nconst isUnitPosition = (position: number): boolean => position == UNIT_POSITION;\nconst isTenPosition = (position: number): boolean =>\n  position % MAX_POSITION == TEN_POSITION;\nconst isMillionsPosition = (position: number): boolean =>\n  position >= MAX_POSITION && position % MAX_POSITION == 0;\nconst isLastPosition = (position: number, lengthOfDigits: number): boolean =>\n  position + 1 < lengthOfDigits;\n\nconst reverseNumber = (number: string): string => {\n  const numberStr = number.toString();\n  return numberStr\n    .split('')\n    .reverse()\n    .join('');\n};\n\nconst getBathUnit = (position: number, number: number): string => {\n  let unitText = '';\n\n  if (!isUnitPosition(position)) {\n    unitText = UNIT_TEXTS[Math.abs(position - 1) % MAX_POSITION];\n  }\n\n  if (isZeroValue(number) && !isMillionsPosition(position)) {\n    unitText = '';\n  }\n\n  return unitText;\n};\n\nconst getBathText = (\n  position: number,\n  number: number,\n  lengthOfDigits: number,\n): string => {\n  let numberText = NUMBER_TEXTS[number];\n\n  if (isZeroValue(number)) {\n    return '';\n  }\n\n  if (isTenPosition(position) && number == 1) {\n    numberText = '';\n  }\n\n  if (isTenPosition(position) && number == 2) {\n    numberText = 'ยี่';\n  }\n\n  if (\n    isMillionsPosition(position) &&\n    isLastPosition(position, lengthOfDigits) &&\n    number == 1\n  ) {\n    numberText = 'เอ็ด';\n  }\n\n  if (\n    lengthOfDigits == 2 &&\n    isLastPosition(position, lengthOfDigits) &&\n    number == 1\n  ) {\n    numberText = 'เอ็ด';\n  }\n\n  if (lengthOfDigits > 1 && isUnitPosition(position) && number == 1) {\n    numberText = 'เอ็ด';\n  }\n\n  return numberText;\n};\n\n// convert function without async\nconst convert = (numberInput: string): string => {\n  const numberReverse = reverseNumber(numberInput);\n  let textOutput = '';\n  // console.log('>', numberReverse.split(''))\n  numberReverse.split('').forEach((number: string, i: number): void => {\n    textOutput = `${getBathText(\n      i,\n      parseFloat(number),\n      numberReverse.length,\n    )}${getBathUnit(i, parseFloat(number))}${textOutput}`;\n  });\n  return textOutput;\n};\n\nconst parseFloatWithPrecision = (number: number, precision = 2): string => {\n  const numberFloatStr = number.toString().split('.');\n  const integerUnitStr = numberFloatStr[0];\n  const fractionalUnitStr =\n    numberFloatStr.length == 2\n      ? numberFloatStr[1].substring(0, precision)\n      : '00';\n  return parseFloat(`${integerUnitStr}.${fractionalUnitStr}`).toFixed(\n    precision,\n  );\n};\n\nexport const ThaiBaht = (numberInput: number): string => {\n  const numberStr = parseFloatWithPrecision(numberInput);\n\n  const integerDigits = getIntegerDigits(numberStr);\n  const fractionalDigits = getFractionalDigits(numberStr);\n\n  const intTextOutput = convert(integerDigits);\n  const textOutput = [];\n  if (intTextOutput) {\n    textOutput.push(`${[intTextOutput, PRIMARY_UNIT].join('')}`);\n  }\n  if (intTextOutput && !hasFractionalDigits(fractionalDigits)) {\n    textOutput.push(WHOLE_NUMBER_TEXT);\n  }\n  if (hasFractionalDigits(fractionalDigits) && convert(fractionalDigits)) {\n    textOutput.push(`${[convert(fractionalDigits), SECONDARY_UNIT].join('')}`);\n  }\n\n  return textOutput.join('');\n};\n"],"names":["const","PRIMARY_UNIT","SECONDARY_UNIT","NUMBER_TEXTS","split","UNIT_TEXTS","hasFractionalDigits","numberInput","undefined","isZeroValue","number","isUnitPosition","position","isTenPosition","isMillionsPosition","isLastPosition","lengthOfDigits","convert","numberReverse","toString","reverse","join","textOutput","forEach","i","numberText","parseFloat","length","unitText","Math","abs","numberStr","precision","numberFloatStr","integerUnitStr","fractionalUnitStr","substring","toFixed","parseFloatWithPrecision","integerDigits","parseInt","fractionalDigits","intTextOutput","push"],"mappings":"AAAAA,IAIMC,EAAe,MACfC,EAAiB,SAGjBC,EAAe,mDAAmDC,MACtE,KAEIC,EAAa,8BAA8BD,MAAM,KAQjDE,WAAuBC,eACXC,IAAhBD,GAA4C,KAAfA,GAEzBE,WAAeC,UAAsC,GAAVA,GAC3CC,WAAkBC,UAtBF,GAsBgCA,GAChDC,WAAiBD,UACrBA,EAzBmB,GAEA,GAwBfE,WAAsBF,UAC1BA,GA3BmB,GA2BSA,EA3BT,GA2BoC,GACnDG,WAAkBH,EAAkBI,UACxCJ,EAAW,EAAII,GAmEXC,WAAWV,OACTW,EAA8BX,EAjEXY,WAEtBf,MAAM,IACNgB,UACAC,KAAK,IA8DJC,EAAa,UAEjBJ,EAAcd,MAAM,IAAImB,iBAASb,EAAgBc,GAC/CF,cA/CFV,EACAF,EACAM,OAEIS,EAAatB,EAAaO,UAE1BD,EAAYC,GACP,IAGLG,EAAcD,IAAuB,GAAVF,IAC7Be,EAAa,IAGXZ,EAAcD,IAAuB,GAAVF,IAC7Be,EAAa,OAIbX,EAAmBF,IACnBG,EAAeH,EAAUI,IACf,GAAVN,IAEAe,EAAa,QAIK,GAAlBT,GACAD,EAAeH,EAAUI,IACf,GAAVN,IAEAe,EAAa,QAGXT,EAAiB,GAAKL,EAAeC,IAAuB,GAAVF,IACpDe,EAAa,QAGRA,IAUHD,EACAE,WAAWhB,GACXQ,EAAcS,iBAjECf,EAAkBF,OACjCkB,EAAW,UAEVjB,EAAeC,KAClBgB,EAAWvB,EAAWwB,KAAKC,IAAIlB,EAAW,GA3CzB,IA8CfH,EAAYC,KAAYI,EAAmBF,KAC7CgB,EAAW,IAGNA,GAuDWJ,EAAGE,WAAWhB,IAAWY,IAEpCA,6BAegBf,OACjBwB,WAbyBrB,EAAgBsB,kBAAY,OACrDC,EAYoC1B,EAZZY,WAAWf,MAAM,KACzC8B,EAAiBD,EAAe,GAChCE,EACqB,GAAzBF,EAAeN,OACXM,EAAe,GAAGG,UAAU,EAAGJ,GAC/B,YACCN,WAAcQ,MAAkBC,GAAqBE,QAC1DL,GAKgBM,GAEZC,EA/GNC,SA+GuCT,EA/GlB3B,MAAM,KAAK,GAAI,IAAIe,WAgHlCsB,EA7GND,SA6G6CT,EA7GxB3B,MAAM,KAAK,GAAI,IAAIe,WA+GlCuB,EAAgBzB,EAAQsB,GACxBjB,EAAa,UACfoB,GACFpB,EAAWqB,QAAQ,CAACD,EAAezC,GAAcoB,KAAK,KAEpDqB,IAAkBpC,EAAoBmC,IACxCnB,EAAWqB,KAhIW,QAkIpBrC,EAAoBmC,IAAqBxB,EAAQwB,IACnDnB,EAAWqB,QAAQ,CAAC1B,EAAQwB,GAAmBvC,GAAgBmB,KAAK,KAG/DC,EAAWD,KAAK"}