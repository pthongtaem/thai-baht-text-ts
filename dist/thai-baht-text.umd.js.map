{"version":3,"file":"thai-baht-text.umd.js","sources":["../src/thai-baht-text.ts"],"sourcesContent":["const MAX_POSITION = 6;\nconst UNIT_POSITION = 0;\nconst TEN_POSITION = 1;\n\nconst PRIMARY_UNIT = 'บาท';\nconst SECONDARY_UNIT = 'สตางค์';\nconst WHOLE_NUMBER_TEXT = 'ถ้วน';\n\nconst NUMBER_TEXTS = 'ศูนย์,หนึ่ง,สอง,สาม,สี่,ห้า,หก,เจ็ด,แปด,เก้า,สิบ'.split(\n  ',',\n);\nconst UNIT_TEXTS = 'สิบ,ร้อย,พัน,หมื่น,แสน,ล้าน'.split(',');\n\nconst getIntegerDigits = (numberInput: string): string =>\n  parseInt(numberInput.split('.')[0], 10).toString();\n\nconst getFractionalDigits = (numberInput: string): string =>\n  parseInt(numberInput.split('.')[1], 10).toString();\n\nconst hasFractionalDigits = (numberInput: string): boolean =>\n  numberInput !== undefined && numberInput != '0';\n\nconst isZeroValue = (number: number): boolean => number == 0;\nconst isUnitPosition = (position: number): boolean => position == UNIT_POSITION;\nconst isTenPosition = (position: number): boolean =>\n  position % MAX_POSITION == TEN_POSITION;\nconst isMillionsPosition = (position: number): boolean =>\n  position >= MAX_POSITION && position % MAX_POSITION == 0;\nconst isLastPosition = (position: number, lengthOfDigits: number): boolean =>\n  position + 1 < lengthOfDigits;\n\nconst reverseNumber = (number: string): string => {\n  return [...number].reverse().join('');\n};\n\nconst getBathUnit = (position: number, number: number): string => {\n  let unitText = '';\n\n  if (!isUnitPosition(position)) {\n    unitText = UNIT_TEXTS[Math.abs(position - 1) % MAX_POSITION];\n  }\n\n  if (isZeroValue(number) && !isMillionsPosition(position)) {\n    unitText = '';\n  }\n\n  return unitText;\n};\n\nconst getBathText = (\n  position: number,\n  number: number,\n  lengthOfDigits: number,\n): string => {\n  let numberText = NUMBER_TEXTS[number];\n\n  if (isZeroValue(number)) {\n    return '';\n  }\n\n  if (isTenPosition(position) && number == 1) {\n    numberText = '';\n  }\n\n  if (isTenPosition(position) && number == 2) {\n    numberText = 'ยี่';\n  }\n\n  if (\n    isMillionsPosition(position) &&\n    isLastPosition(position, lengthOfDigits) &&\n    number == 1\n  ) {\n    numberText = 'เอ็ด';\n  }\n\n  if (\n    lengthOfDigits == 2 &&\n    isLastPosition(position, lengthOfDigits) &&\n    number == 1\n  ) {\n    numberText = 'เอ็ด';\n  }\n\n  if (lengthOfDigits > 1 && isUnitPosition(position) && number == 1) {\n    numberText = 'เอ็ด';\n  }\n\n  return numberText;\n};\n\n// convert function without async\nconst convert = (numberInput: string): string => {\n  const numberReverse = reverseNumber(numberInput);\n\n  const textOutput = numberReverse\n    .split('')\n    .reduce((pre: string, number: string, i: number) => {\n      return `${getBathText(\n        i,\n        parseFloat(number),\n        numberReverse.length,\n      )}${getBathUnit(i, parseFloat(number))}${pre}`;\n    }, '');\n\n  return textOutput;\n};\n\nconst parseFloatWithPrecision = (\n  number: number,\n  precision = 2,\n): [string, string] => {\n  const numberFloatStr = number.toString().split('.');\n  const integerUnitStr = numberFloatStr[0];\n  const fractionalUnitStr =\n    numberFloatStr.length == 2\n      ? numberFloatStr[1].substring(0, precision)\n      : '00';\n\n  const numberInput = parseFloat(\n    `${integerUnitStr}.${fractionalUnitStr}`,\n  ).toFixed(precision);\n\n  return [getIntegerDigits(numberInput), getFractionalDigits(numberInput)];\n};\n\nexport const ThaiBaht = (numberInput: number): string => {\n  const numberStr = parseFloatWithPrecision(numberInput);\n\n  const integerDigits = numberStr[0];\n  const fractionalDigits = numberStr[1];\n\n  const intTextOutput = convert(integerDigits);\n  const textOutput = [];\n  if (intTextOutput) {\n    textOutput.push(`${[intTextOutput, PRIMARY_UNIT].join('')}`);\n  }\n  if (intTextOutput && !hasFractionalDigits(fractionalDigits)) {\n    textOutput.push(WHOLE_NUMBER_TEXT);\n  }\n  if (hasFractionalDigits(fractionalDigits) && convert(fractionalDigits)) {\n    textOutput.push(`${[convert(fractionalDigits), SECONDARY_UNIT].join('')}`);\n  }\n\n  return textOutput.join('');\n};\n"],"names":["const","PRIMARY_UNIT","SECONDARY_UNIT","NUMBER_TEXTS","split","UNIT_TEXTS","getIntegerDigits","numberInput","parseInt","toString","getFractionalDigits","hasFractionalDigits","undefined","isZeroValue","number","isUnitPosition","position","isTenPosition","isMillionsPosition","isLastPosition","lengthOfDigits","convert","numberReverse","reverse","join","reduce","pre","i","numberText","parseFloat","length","unitText","Math","abs","numberStr","precision","numberFloatStr","integerUnitStr","fractionalUnitStr","substring","toFixed","parseFloatWithPrecision","fractionalDigits","intTextOutput","textOutput","push"],"mappings":"oLAAAA,IAIMC,EAAe,MACfC,EAAiB,SAGjBC,EAAe,mDAAmDC,MACtE,KAEIC,EAAa,8BAA8BD,MAAM,KAEjDE,WAAoBC,UACxBC,SAASD,EAAYH,MAAM,KAAK,GAAI,IAAIK,YAEpCC,WAAuBH,UAC3BC,SAASD,EAAYH,MAAM,KAAK,GAAI,IAAIK,YAEpCE,WAAuBJ,eACXK,IAAhBL,GAA4C,KAAfA,GAEzBM,WAAeC,UAAsC,GAAVA,GAC3CC,WAAkBC,UAtBF,GAsBgCA,GAChDC,WAAiBD,UACrBA,EAzBmB,GAEA,GAwBfE,WAAsBF,UAC1BA,GA3BmB,GA2BSA,EA3BT,GA2BoC,GACnDG,WAAkBH,EAAkBI,UACxCJ,EAAW,EAAII,GA+DXC,WAAWd,OACTe,EA7DC,UA6D6Bf,GA7DjBgB,UAAUC,KAAK,WA+DfF,EAChBlB,MAAM,IACNqB,gBAAQC,EAAaZ,EAAgBa,qBA/CxCX,EACAF,EACAM,OAEIQ,EAAazB,EAAaW,UAE1BD,EAAYC,GACP,IAGLG,EAAcD,IAAuB,GAAVF,IAC7Bc,EAAa,IAGXX,EAAcD,IAAuB,GAAVF,IAC7Bc,EAAa,OAIbV,EAAmBF,IACnBG,EAAeH,EAAUI,IACf,GAAVN,IAEAc,EAAa,QAIK,GAAlBR,GACAD,EAAeH,EAAUI,IACf,GAAVN,IAEAc,EAAa,QAGXR,EAAiB,GAAKL,EAAeC,IAAuB,GAAVF,IACpDc,EAAa,QAGRA,IAWDD,EACAE,WAAWf,GACXQ,EAAcQ,iBAlEDd,EAAkBF,OACjCiB,EAAW,UAEVhB,EAAeC,KAClBe,EAAW1B,EAAW2B,KAAKC,IAAIjB,EAAW,GAvCzB,IA0CfH,EAAYC,KAAYI,EAAmBF,KAC7Ce,EAAW,IAGNA,GAwDaJ,EAAGE,WAAWf,IAAWY,GACxC,yBAuBkBnB,OACjB2B,WAlBNpB,EACAqB,kBAAY,OAENC,EAAiBtB,EAAOL,WAAWL,MAAM,KACzCiC,EAAiBD,EAAe,GAChCE,EACqB,GAAzBF,EAAeN,OACXM,EAAe,GAAGG,UAAU,EAAGJ,GAC/B,KAEA5B,EAAcsB,WACfQ,MAAkBC,GACrBE,QAAQL,SAEH,CAAC7B,EAAiBC,GAAcG,EAAoBH,IAIzCkC,CAAwBlC,GAGpCmC,EAAmBR,EAAU,GAE7BS,EAAgBtB,EAHAa,EAAU,IAI1BU,EAAa,UACfD,GACFC,EAAWC,QAAQ,CAACF,EAAe1C,GAAcuB,KAAK,KAEpDmB,IAAkBhC,EAAoB+B,IACxCE,EAAWC,KApIW,QAsIpBlC,EAAoB+B,IAAqBrB,EAAQqB,IACnDE,EAAWC,QAAQ,CAACxB,EAAQqB,GAAmBxC,GAAgBsB,KAAK,KAG/DoB,EAAWpB,KAAK"}